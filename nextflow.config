/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/ampliseq Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // Input options
    input                      = null
    input_fasta                = null
    input_folder               = null
    multiregion                = null
    extension                  = "/*_R{1,2}_001.fastq.gz"
    pacbio                     = false
    iontorrent                 = false
    FW_primer                  = null
    RV_primer                  = null
    classifier                 = null
    metadata                   = null

    // Other options
    

    save_intermediates         = false
    trunc_qmin                 = 25
    trunc_rmin                 = 0.75
    trunclenf                  = null
    trunclenr                  = null
    max_ee                     = 2
    max_len                    = null
    ignore_failed_filtering    = false
    min_len                    = 50
    metadata_category          = null
    metadata_category_barplot  = null
    double_primer              = false
    retain_untrimmed           = false
    cutadapt_min_overlap       = 3
    cutadapt_max_error_rate    = 0.1
    exclude_taxa               = "mitochondria,chloroplast"
    min_frequency              = 1
    min_samples                = 1
    multiple_sequencing_runs   = false
    single_end                 = false
    sample_inference           = "independent"
    illumina_novaseq           = false
    illumina_pe_its            = false
    concatenate_reads          = "with_overlap"
    cut_its                    = "none"
    its_partial                = 0
    picrust                    = false
    sbdiexport                 = false
    addsh                      = false
    tax_agglom_min             = 2
    tax_agglom_max             = 6
    min_read_counts            = 1
    ignore_failed_trimming     = false
    ignore_empty_input_files   = false
    qiime_adonis_formula       = null
    seed                       = 100
    filter_ssu                 = null
    min_len_asv                = null
    max_len_asv                = null
    filter_codons              = null
    orf_start                  = 1
    orf_end                    = null
    stop_codons                = "TAA,TAG"
    pplace_tree                = null
    pplace_aln                 = null
    pplace_model               = null
    pplace_alnmethod           = 'hmmer'
    pplace_taxonomy            = null
    pplace_name                = null
    diversity_rarefaction_depth= 500
    ancom_sample_min_count     = 1
    vsearch_cluster            = null
    vsearch_cluster_id         = 0.97

    // Report options
    report_template   = "${projectDir}/assets/report_template.Rmd"
    report_css        = "${projectDir}/assets/nf-core_style.css"
    report_logo       = "${projectDir}/assets/nf-core-ampliseq_logo_light_long.png"
    report_title      = "Summary of analysis results"
    report_abstract   = null

    // Skipping options
    skip_cutadapt          = false
    skip_dada_quality      = false
    skip_barrnap           = false
    skip_qiime             = false
    skip_qiime_downstream  = false
    skip_fastqc            = false
    skip_alpha_rarefaction = false
    skip_abundance_tables  = false
    skip_barplot           = false
    skip_taxonomy          = false
    skip_dada_taxonomy     = false
    skip_dada_addspecies   = false
    skip_alpha_rarefaction = false
    skip_diversity_indices = false
    skip_ancom             = false
    skip_multiqc           = false
    skip_report            = false

    // Database options
    dada_ref_taxonomy        = "silva=138"
    dada_assign_taxlevels    = null
    dada_ref_tax_custom      = null
    dada_ref_tax_custom_sp   = null
    cut_dada_ref_taxonomy    = false
    dada_addspecies_allowmultiple = false
    dada_taxonomy_rc         = false
    sintax_ref_taxonomy      = null
    qiime_ref_taxonomy       = null
    qiime_ref_tax_custom     = null
    kraken2_ref_taxonomy     = null
    kraken2_assign_taxlevels = null
    kraken2_ref_tax_custom   = null
    kraken2_confidence       = 0.0
    sidle_ref_taxonomy       = null
    sidle_ref_tax_custom     = null
    sidle_ref_tree_custom    = null

    // MultiQC options
    multiqc_config             = null
    multiqc_title              = null
    multiqc_logo               = null
    max_multiqc_email_size     = '25.MB'
    multiqc_methods_description = null

    // Boilerplate options
    outdir                     = null
    publish_dir_mode           = 'copy'
    email                      = null
    email_on_fail              = null
    plaintext_email            = false
    monochrome_logs            = false
    hook_url                   = null
    help                       = false
    version                    = false

    // Config options
    config_profile_name        = null
    config_profile_description = null
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_contact     = null
    config_profile_url         = null

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'

    // Schema validation default options
    validationFailUnrecognisedParams = false
    validationLenientMode            = false
    validationSchemaIgnoreParams     = 'dada_ref_databases,qiime_ref_databases,sintax_ref_databases,kraken2_ref_databases,sidle_ref_databases,genomes,igenomes_base'
    validationShowHiddenParams       = false
    validate_params                  = true

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load nf-core/ampliseq custom profiles from different institutions.
// Warning: Uncomment only if a pipeline-specific institutional config already exists on nf-core/configs!
// try {
//   includeConfig "${params.custom_config_base}/pipeline/ampliseq.config"
// } catch (Exception e) {
//   System.err.println("WARNING: Could not load nf-core/config/ampliseq profiles: ${params.custom_config_base}/pipeline/ampliseq.config")
// }
profiles {
    debug {
        dumpHashes             = true
        process.beforeScript   = 'echo $HOSTNAME'
        cleanup                = false
        nextflow.enable.configProcessNamesValidation = true
    }
    conda {
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        channels               = ['conda-forge', 'bioconda', 'defaults']
        apptainer.enabled      = false
    }
    mamba {
        conda.enabled          = true
        conda.useMamba         = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    docker {
        docker.enabled         = true
        conda.enabled          = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
        docker.runOptions      = '-u $(id -u):$(id -g)'
    }
    arm {
        docker.runOptions      = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        conda.enabled          = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    podman {
        podman.enabled         = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    shifter {
        shifter.enabled        = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    charliecloud {
        charliecloud.enabled   = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        apptainer.enabled      = false
    }
    apptainer {
        apptainer.enabled      = true
        apptainer.autoMounts   = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    gitpod {
        executor.name          = 'local'
        executor.cpus          = 4
        executor.memory        = 8.GB
    }
    test               { includeConfig 'conf/test.config'               }
    test_single        { includeConfig 'conf/test_single.config'        }
    test_multi         { includeConfig 'conf/test_multi.config'         }
    test_doubleprimers { includeConfig 'conf/test_doubleprimers.config' }
    test_pacbio_its    { includeConfig 'conf/test_pacbio_its.config'    }
    test_iontorrent    { includeConfig 'conf/test_iontorrent.config'    }
    test_fasta         { includeConfig 'conf/test_fasta.config'         }
    test_failed        { includeConfig 'conf/test_failed.config'        }
    test_full          { includeConfig 'conf/test_full.config'          }
    test_reftaxcustom  { includeConfig 'conf/test_reftaxcustom.config'  }
    test_qiimecustom   { includeConfig 'conf/test_qiimecustom.config'   }
    test_novaseq       { includeConfig 'conf/test_novaseq.config'       }
    test_pplace        { includeConfig 'conf/test_pplace.config'        }
    test_sintax        { includeConfig 'conf/test_sintax.config'        }
    test_multiregion   { includeConfig 'conf/test_multiregion.config'   }
}

// Set default registry for Apptainer, Docker, Podman and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Singularity are enabled
// Set to your registry if you have a mirror of containers
apptainer.registry   = 'quay.io'
docker.registry      = 'quay.io'
podman.registry      = 'quay.io'
singularity.registry = 'quay.io'

// Nextflow plugins
plugins {
    id 'nf-validation@1.1.3' // Validation of pipeline parameters and creation of an input channel from a sample sheet
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Disable process selector warnings by default. Use debug profile to enable warnings.
nextflow.enable.configProcessNamesValidation = false

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'nf-core/ampliseq'
    author          = """Daniel Straub, Alexander Peltzer"""
    homePage        = 'https://github.com/nf-core/ampliseq'
    description     = """Amplicon sequencing analysis workflow using DADA2 and QIIME2"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.0'
    version         = '2.9.0'
    doi             = '10.5281/zenodo.1493841'
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Load ref_databases.config for reference taxonomy
includeConfig 'conf/ref_databases.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
