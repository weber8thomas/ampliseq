nextflow_pipeline {

    name "Test Workflow main.nf"
    script "main.nf"
    tag "test_fasta"
    tag "pipeline"

    test("Fasta Input") {

        when {
            params {
                outdir = "$outputDir"
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert new File("$outputDir/pipeline_info/software_versions.yml").exists() },
                { assert snapshot(path("$outputDir/asv_length_filter/ASV_len_filt.tsv"),
                                path("$outputDir/asv_length_filter/ASV_len_orig.tsv"),
                                path("$outputDir/asv_length_filter/ASV_seqs.len.fasta"),
                                path("$outputDir/asv_length_filter/stats.len.tsv")).match("asv_length_filter") },
                { assert snapshot(path("$outputDir/barrnap/rrna.arc.gff"),
                                path("$outputDir/barrnap/rrna.bac.gff"),
                                path("$outputDir/barrnap/rrna.euk.gff"),
                                path("$outputDir/barrnap/rrna.mito.gff")).match("barrnap") },
                { assert snapshot(path("$outputDir/codon_filter/ASV_codon_filtered.fna"),
                                path("$outputDir/codon_filter/ASV_codon_filtered.list")).match("codon_filter") },
                { assert new File("$outputDir/barrnap/summary.tsv").exists() },
                { assert snapshot(path("$outputDir/dada2/ref_taxonomy.rdp_18.txt")).match("dada2") },
                { assert new File("$outputDir/dada2/ASV_tax_species.rdp_18.tsv").exists() },
                { assert new File("$outputDir/dada2/ASV_tax.rdp_18.tsv").exists() },
                { assert snapshot(path("$outputDir/input/ASV_seqs.fasta")).match("input") },
                { assert new File("$outputDir/summary_report/summary_report.html").exists() }
            )
        }
    }
}
